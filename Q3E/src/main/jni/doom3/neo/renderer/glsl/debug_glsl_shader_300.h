
// simple vertex/texcoord vertex shader
GLSL_SHADER const char ES3_SIMPLE_VERTEX_TEXCOORD_VERT[] =
"#version 300 es\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"in vec4 attr_TexCoord;\n"
"in highp vec4 attr_Vertex;\n"
"\n"
"uniform highp mat4 u_modelViewProjectionMatrix;\n"
"\n"
"out vec2 var_TexDiffuse;\n"
"\n"
"void main(void)\n"
"{\n"
"    var_TexDiffuse = attr_TexCoord.xy;\n"
"\n"
"    gl_Position = attr_Vertex * u_modelViewProjectionMatrix;\n"
"}\n"
;

// depth to color shader
GLSL_SHADER const char ES3_DEPTH_TO_COLOR_FRAG[] =
"#version 300 es\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform highp sampler2D u_fragmentMap0; // depth\n"
"\n"
"uniform bool u_uniformParm0; // not pack to RGBA\n"
"\n"
"in vec2 var_TexDiffuse;\n"
"out vec4 _gl_FragColor;\n"
"\n"
"vec4 pack (highp float depth)\n"
"{\n"
"    const highp vec4 bitSh = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n"
"    const highp vec4 bitMsk = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n"
"    highp vec4 comp = fract(depth * bitSh);\n"
"    comp -= comp.xxyz * bitMsk;\n"
"    return depth < 1.0 ? comp : vec4(1.0, 1.0, 1.0, 1.0);\n"
"}\n"
"\n"
"void main(void)\n"
"{\n"
"    highp vec4 depth = texture(u_fragmentMap0, var_TexDiffuse);\n"
"    vec4 packColor = pack(depth.r);\n"
"    vec4 color = vec4(depth.r);\n"
"    _gl_FragColor = u_uniformParm0 ? color : packColor;\n"
"}\n"
;

// depth to color shader
GLSL_SHADER const char ES3_STENCIL_TO_COLOR_FRAG[] =
"#version 300 es\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform mediump usampler2D u_fragmentMap0; // stencil index\n"
"\n"
"uniform int u_uniformParm0; // 0=RGB, 1=R, 2=G, 4=B\n"
"\n"
"in vec2 var_TexDiffuse;\n"
"out vec4 _gl_FragColor;\n"
"\n"
"void main(void)\n"
"{\n"
"    float index = float(texture(u_fragmentMap0, var_TexDiffuse).r) / 255.0;\n"
"    float r = bool(u_uniformParm0 & 1) || u_uniformParm0 == 0 ? index : 0.0;\n"
"    float g = bool(u_uniformParm0 & 2) || u_uniformParm0 == 0 ? index : 0.0;\n"
"    float b = bool(u_uniformParm0 & 4) || u_uniformParm0 == 0 ? index : 0.0;\n"
"    _gl_FragColor = vec4(r, g, b, 1.0);\n"
"}\n"
;
